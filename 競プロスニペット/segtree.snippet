<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>segtree</Title>
      <Shortcut>segtree</Shortcut>
      <Description>RMQ(?)</Description>
      <Author></Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false"></Literal>
      </Declarations>
      <Code Language="cpp"><![CDATA[template<class T> class segtree {
    int n = 1;
    vector<T> dat;
    T def = INF; //Default value

public:
    segtree(int _n) {
        while (n < _n)n *= 2;
        dat.resize(2 * n - 1, def);
    }
    segtree(vector<T> a) {
        int _n = a.size();
        while (n < _n)n *= 2;
        dat.resize(2 * n - 1, def);
        rep(i, 0, _n)dat[i + n - 1] = a[i];
        rrep(i, 0, n - 1)dat[i] = fun(dat[2 * i + 1], dat[2 * i + 2]);
    }


    //sum,min,max,etc...
    T fun(T x, T y) { return min(x, y); }

    //assignment,chmin,chmax,etc...
    void update(int i, T a) {
        i += n - 1;
        dat[i] = a;
        while (i > 0) {
            --i /= 2;
            dat[i] = fun(dat[2 * i + 1], dat[2 * i + 2]);
        }
    }


    T value(int a, int b, int k, int l, int r) {
        if (b <= l || r <= a)return def;
        if (a <= l && r <= b)return dat[k];
        T s = value(a, b, 2 * k + 1, l, (l + r) / 2);
        T t = value(a, b, 2 * k + 2, (l + r) / 2, r);
        return fun(s, t);
    }
    T value(int a, int b) { return value(a, b, 0, 0, n); }

    T operator[](int k) { return dat[k + n - 1]; }
};
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>